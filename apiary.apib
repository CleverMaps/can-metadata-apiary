FORMAT: 1A
HOST: https://secure.cleveranalytics.com/rest/projects/

# Metadata 2.0

Draft of new metadata for redesigned CleverAnalytics Platform

## TODO
* Is it necessary to use complete URLs for datasets, markerSelectors, markerCollections etc.?
* Design filter metadata
* Transform `groups.json`, could define available granularity, no zoom settings
* How to find out polygon granularity?
* How to decide what should be searched? Addresses almost always, then all features that can be in view.
* How to save and share application state?
* Could we remove FeatureCollections at all? Replace with styles...

## PopUp

REMOVED popUp metadata.

PopUp content is automatically prepared according to feature `dataset`, selected `dashboard` and `indicator`:
* **Title and Subtitle** from `dataset.properties.featureTitle`
* **Main indicator** from currently selected `indicator`. Special position or first item in grid.
* **Other indicators grid** some other indicators in grid automatically selected from (parent) `dashboard.content.indicator`

## Project NEW [/{project}/project]

### Get project [GET]

Get default project settings. Other than `bootstrap/project`. MapOptions and ViewCategories were moved here.

#### TODO

+ Response 200 (application/json)

        {
            "type": "project",
            "language": "en",
            "viewCategories": [
                {
                    "name": "overview",
                    "title": "Store Performance"
                }
            ],
            "mapOptions": {
                "center": {
                    "lat": 49.8,
                    "lng": 16
                },
                "zoom": 8,
                "minZoom": 0,
                "maxZoom": 18,
                "tileLayer": "mapbox"
            }
        }

## Datasets [/{project}/datasets]

### Get datasets [GET]

Get all project datasets.

#### Changes
* REMOVED `properties.includingVat` and `properties.period`
* REMOVED `properties.icon` was used for search categories. Style from
markerCollections will be used instead.
* REMOVED `properties.notFoundMessage` generic messages should be enough
* ADDED `ref.type==='vt'` new Vector Tiles dataset type
* REMOVED `properties.crs` always using 4326
* REMOVED `ref.featureKey` not necessary with DWH
* EDITED `searchBy` is removed and defined in `ref.properties` with `fullTextBoost` attribute
* ADDED `ref.subtype` dataset subtype (`geometryPolygon`, `geometryLine`,
`geometryPoint`), currently empty if dataset has no geometry
* ADDED `ref.geometry` name of corresponding vector tile dataset
* ADDED `origin` link to original project

+ Response 200 (application/json)

        [
            {
                "name": "county-dwh",
                "type": "dataset",
                "title": "County",
                "description": "Optional description of dataset",
                "properties": {
                    "featureTitle": <Expression>,
                    "featureSubtitle": <Expression>
                },
                "ref": {
                    "type": "dwh",
                    "subtype": "geometryPolygon",
                    "table": "county",
                    "primaryKey": "area_code",
                    "geometry": "zsjd-vt",
                    "properties": [
                        {
                            "name": "nazev",
                            "title": "název",
                            "column": "nazev",
                            "type": "string",
                            "fullTextBoost": 8
                        },
                        {
                            "name": "kod_zsj_d",
                            "title": "kód ZSJD",
                            "column": "kod_zsj_d",
                            "type": "string"
                        },
                        {
                            "name": "x_min",
                            "column": "x_min",
                            "type": "double"
                        },
                        {
                            "name": "x_max",
                            "column": "x_max",
                            "type": "double"
                        },
                        {
                            "name": "y_min",
                            "column": "y_min",
                            "type": "double"
                        },
                        {
                            "name": "y_max",
                            "column": "y_max",
                            "type": "double"
                        }
                    ]
                }
            },
            {
                "name": "store-dwh",
                "type": "dataset",
                "title": "My Stores",
                "description": "Description of my stores dataset",
                "properties": {
                    "featureTitle": <Expression>,
                    "featureSubtitle": <Expression>
                },
                "ref": {
                    "type": "dwh",
                    "subtype": "geometryPoint",
                    "table": "store_table",
                    "primaryKey": "store_id",
                    "properties": [
                        {
                            "name": "store_id",
                            "title": "kod pobocky",
                            "column": "id",
                            "type": "string"
                        },
                        {
                            "name": "nazev",
                            "title": "název",
                            "column": "nazev",
                            "type": "string",
                            "fullTextBoost": 4
                        },
                        {
                            "name": "lng",
                            "column": "lng",
                            "type": "longitude"
                        },
                        {
                            "name": "lat",
                            "column": "lat",
                            "type": "latitude"
                        }
                    ]
                }
            },
            {
                "name": "zsjd-vt",
                "type": "dataset",
                "title": "Vector tiles for ZSJD",
                "description": "Optional description of dataset",
                "origin": "https://secure.cleveranalytics.com/rest/projects/zcoi9en758vkuuwu",
                "properties": {
                    "zoom": {
                        "min": 5,
                        "max": 18,
                        "optimal": 16
                    }
                },
                "ref": {
                    "type": "vt",
                    "urlTemplate":"https://s3-eu-west-1.amazonaws.com/can-vector-tiles/zcoi9en758vkuuwu/zsjd/{z}/{x}/{y}.pbf"
                }
            },
            {
                "name": "kraj_wfs"
                "type": "dataset",
                "title": "kraj_wfs",
                "origin": "https://secure.cleveranalytics.com/rest/projects/zcoi9en758vkuuwu",
                "ref": {
                    "type": "wfs",
                    "workspace": "zcoi9en758vkuuwu",
                    "layer": "kraj_wfs",
                    "primaryKey": "kod_kraj",
                    "properties": []
                }
            }
        ]

## Views [/{project}/views]

### Get views [GET]

Get all views.

#### TODO
* Remove `invisibleFeatureCollections`. Enable universal address search differently.
* How to change filters from `filterGroup`?

#### Changes
* EDITED `type` is `"view"`
* REMOVED `featureCollection` moved to dashboard indicators
* REMOVED `landing` moved to `content`. Former `landing.title` must be the same as `content.title`
* REMOVED `content.grid` moved to `dashboard`
* REMOVED `content.chart`
* REMOVED `content.chartGroup`
* REMOVED `content.featureQueries` moved to `dashboard`
* REMOVED `content.measureTool` - now always available
* REMOVED `content.filters` - dropdown filter is removed (currently used for market share views)
* ADDED `content.icon` simplified `landing.icon`, no type, just image ID
* ADDED `content.description` description from `landing`

+ Response 200 (application/json)

        [
            {
                "name": "area-overview",
                "type": "view",
                "category": "base",
                "content": {
                    "title": "Revenue Overview",
                    "description": "Visualization of branch revenues across country",
                    "icon": "blue-1",
                    "dashboard": "/rest/projects/$projectId/metadata/uicomponents/overviewDashboard",
                    "fcSelector": "/rest/projects/$projectId/metadata/uicomponents/fcSelector",
                    "filterGroup": {}
                },
                "mapOptions": <MapOptions>
            }
        ]

## Dashboard [/{project}/{overviewDashboard}]

### Get dashboard metadata [GET]

Get dashboard metadata. Formerly known as **infoPanel**.
Now the dashboard for view should have the same capabilities
as dashboard for selected feature (marker, polygon etc.).

#### Parameters
* **name** - referenced in `view` or `featureCollection`
* **id** (optional) - if feature is selected
* **dataset** (optional) - if feature is selected

#### TODO
* Compute property values from feature or catchment-area or radius query?
* Define complete fitness object (style, format, mouseover behavior)
* Could be blocks on dashboard?

#### Changes (vs. infoPanel)
* EDITED `type` is dashboard
* REMOVED `extraFeatureCollections` not necessary in dashboard
* REMOVED `content.title` and `content.subtitle` inherited from dataset or view
* REMOVED `gridGroup`
* REMOVED `chart`
* REMOVED `chartGroup`
* REMOVED `productList`
* REMOVED `featureList`
* REMOVED `legend`
* REMOVED `radiusQuery`
* REMOVED `featureQueries` the query can be created from other content and `/indicators` resource
* REMOVED `featureCollection` Must be linked with indicator
* EDITED `content.grid` Not clickable, always just one attribute
* ADDED `content.indicator` List of clickable indicators, sometimes with catchment area

#### Indicator
Array of components. It's always possible to drill down this.
* id: indicator ID, can be found in `/metrics` resource
* fitness: type of fitness indicator visualization - `percentile` or  `trend`
* indicatorDetail: drill down indicator metadata

+ Response 200 (application/json)

        {
            "name": "overviewDashboard",
            "type": "dashboard",
            "content": {
                "indicator": [
                    {
                        "id": "revenue",
                        "fitness":  "percentile",
                        "indicatorDetail": "/rest/projects/$projectId/metadata/uicomponents/revenueIndicator"
                    }
                ],
                "grid": [
                    {
                        "propertyId": "revenue_share",
                        "fitness": "trend"
                    }
                ]
            }
        }

## IndicatorDetail [/{project}/{revenueIndicator}]

Get indicator infoPanel metadata. Formerly known as **businessGoalDetail**.
It should have the same capabilities for overview indicator and feature indicator.

### Get indicator detail metadata [GET]

#### Parameters
* **name** - referenced in `view`
* **id** - indicator id
* **featureId** (optional) - if feature is selected, potentially recursive
* **featureDataset** (optional) - if feature is selected, potentially recursive

#### TODO
* Unify fitness attributes - compute automatically `property(_percentile|_trend|_rank)`
* Define `blocks` content
* Define `fitness` options, maybe not necessary
* Barcharts/Piecharts from map categories?
* How to compute chart values, categories, formulas
* How to preserve block settings on feature change

#### Changes
* EDITED `type` is `indicatorDetail`
* REMOVED `featureCollection` added/updated automatically based on granularity and feature filters
* REMOVED `content.title` and `content.subtitle` replaced with former `content.businessGoal`
* REMOVED `content.businessGoal` computed automatically from parameter **propertyId**
* REMOVED `content.linkedDetails`
* REMOVED `content.filters` both slider and dropdown filters removed
* REMOVED `content.grid` moved to `blocks` or removed
* EDITED `content.legend` moved to `blocks` transformed to `histogram`
* EDITED `content.chart` moved to `blocks`
* EDITED `content.chartGroup` moved to `blocks`
* EDITED `content.productList` moved to `blocks` transformed to `ranking`
* REMOVED `extraFeatureCollections`

+ Response 200 (application/json)

        {
            "name": "revenueIndicator",
            "type": "indicatorDetail",
            "content": {
                "fitness": {
                    "percentile": <Options>,
                    "trend": <Options>
                },
                "blocks": [
                    {
                        "type": "histogram"
                    },
                    {
                        "type": "ranking",
                        "size": 10
                    },
                    {
                        "type": "barchart",
                        "title": "Revenue per day of week and sex",
                        "mainSplit": "day",
                        "stackSplit": null,
                        "dualSplit": "sex",
                        "tooltip": <Expression>
                    },
                    {
                        "type": "piechart",
                        "title": "Revenue per day of week",
                        "mainSplit": "day",
                        "tooltip": <Expression>
                    }
                ]
            }
        }

## Indicators NEW [/{project}/indicators]

### Get indicators [GET]

Get all project indicators.

#### TODO
* Make sure we can automatically compute percentile, ntile, ranking, trend from each indicator metric query
* Is it possible to compute automatically values for not georeferenced records?

+ Response 200 (application/json)

        [
            {
                "id": "revenue",
                "type": "indicator",
                "title": "Revenue",
                "description": "Total annual revenue",
                "properties" : {
                    "sort": "desc",
                    "format": {
                        "type": "currency",
                        "fraction": 0
                    },
                    "distribution": "geometric",
                    "intervals": 5
                    "style": {
                        "polygon": "polygon-blue-gradient",
                        "heatmap": "heatmap-normal",
                        "point": "circle-blue-gradient-5"
                    },
                },
                "query": {
                    "type": "function_sum",
                    "content": [
                        {
                            "type": "property",
                            "value": "stores_dwh.revenue"
                        }
                    ]
                }
            }
        ]

## MarkerCollection [/{project}/markerCollection]

### Get markerCollections [GET]

Get all markerCollections. Modified resource `featureCollections`

### Changes
* EDITED `type` is always `markerCollection`
* EDITED `data` Changed to `dataset` - link to dataset is enough
* EDITED `filter` Moved from data.filter, changed to default DWH filter
* REMOVED `action.hover`
* REMOVED `action.select` all params can be derived from `dataset` and `propertyId`, metadata from `infoPanel`
* REMOVED `detailInfoPanel` specified in markerSelector
* REMOVED `groupInfoPanel` should have the same content as `infoPanel`
* EDITED `defaultStyle` replaced with `style` -- ID of predefined style

+ Response 200 (application/json)

        [
            {
                "name": "stores-blue",
                "type": "markerCollection",
                "dataset": "/rest/projects/$projectId/metadata/dataset/store-dwh"
                "filter": [
                    {
                        "property": "storetype",
                        "value": "blue",
                        "operator": "eq"
                    }
                ],
                "style": "marker-blue"
            },
            {
                "name": "stores-pink",
                "type": "markerCollection",
                "dataset": "/rest/projects/$projectId/metadata/dataset/store-dwh",
                "filter": [
                    {
                        "property": "storetype",
                        "value": "pink",
                        "operator": "eq"
                    }
                ],
                "style": "marker-pink"
            }
        ]

## MarkerSelector [/{project}/{markerSelectorOverview}]

### Get markerSelector [GET]

Get markerSelector. This was previously fcSelector, but it can show only marker layers now.

### Changes
* EDITED `type` is always `markerSelector`

+ Response 200 (application/json)

        [
            {
                "type": "markerSelectorCategory",
                "dataset": "/rest/projects/$projectId/metadata/dataset/store-dwh",
                "dashboard": "/rest/projects/$projectId/metadata/uicomponents/storeDashboard",
                "layers": [
                    {
                        "markerCollection": "stores-blue",
                        "visible": true
                    },
                    {
                        "markerCollection": "stores-pink",
                        "visible": true
                    }
                ]
            },
            {
                "type": "markerSelectorCategory",
                "dataset": "/rest/projects/$projectId/metadata/dataset/atm-dwh",
                "dashboard": "/rest/projects/$projectId/metadata/uicomponents/atmDashboard",
                "layers": [
                    {
                        "markerCollection": "atm-blue",
                        "visible": false,
                        "addOnExpand": true
                    },
                    {
                        "markerCollection": "atm-pink",
                        "visible": false,
                        "addOnExpand": false
                    }
                ]
            }
        ]